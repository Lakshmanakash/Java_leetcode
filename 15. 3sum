//Input: nums = [-1,0,1,2,-1,-4]
//Output: [[-1,-1,2],[-1,0,1]]
//Explanation: 
//nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
//nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
//nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
//The distinct triplets are [-1,0,1] and [-1,-1,2].
//Notice that the order of the output and the order of the triplets does not matter.

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);                               //sorted array [-4,-1,-1,0,1,2]
        for(int i=0;i<nums.length-2;i++){                                    
            if(i>0 && nums[i]==nums[i-1]) continue;     //avoid repeatation of iteration 
            int low=i+1,high=nums.length-1;
            int target= -nums[i];
            while(low<high){          
                if(nums[low]+nums[high]==target){
                    result.add(Arrays.asList(nums[i],nums[low],nums[high]));
                    while(low<high && nums[low]==nums[low+1]) low++;                    //check repeatation if we use 'if' it only check for next number,if we use
                    while(low<high && nums[high]==nums[high-1]) high--;                  //while then it check upto crossing the repeated values
                    low++;
                    high--;
                }
                else if(nums[low]+nums[high]>target) high--;
                else low++;
               
            }
            
        }
        return result;
    }
}
